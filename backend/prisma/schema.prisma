generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id                                  Int              @id @default(autoincrement())
  provider                                 ProviderType
  provider_id                              String           @unique @db.VarChar(255)
  nickname                                 String           @unique
  image_url                                String?
  created_at                               DateTime         @default(now())
  refresh_token                            String?
  comments                                 Comment[]
  expenses                                 Expense[]
  Friendship_Friendship_recipient_idToUser Friendship[]     @relation("Friendship_recipient_idToUser")
  Friendship_Friendship_requester_idToUser Friendship[]     @relation("Friendship_requester_idToUser")
  likes                                    Like[]
  posts                                    Post[]
  trips                                    Trip[]
  TripInvitation                           TripInvitation[]
}

model Trip {
  trip_id        String           @id @unique
  user_id        Int
  title          String
  start_date     DateTime         @db.Date
  end_date       DateTime         @db.Date
  is_shared      TripVisibility   @default(PRIVATE)
  companion_type CompanionType[]
  destinations   String[]
  theme          ThemeType[]
  version        Int              @default(0)
  checklist      Checklist[]
  days           Day[]
  expenses       Expense[]
  posts          Post[]
  user           User             @relation(fields: [user_id], references: [user_id])
  TripInvitation TripInvitation[]
}

model Day {
  day_id   Int        @id @default(autoincrement())
  trip_id  String
  date     DateTime   @db.Date
  trip     Trip       @relation(fields: [trip_id], references: [trip_id])
  places   DayPlace[]
  expenses Expense[]
}

model DayPlace {
  day_id   Int
  place_id String
  order    Int
  day      Day    @relation(fields: [day_id], references: [day_id])
  place    Place  @relation(fields: [place_id], references: [place_id])

  @@id([day_id, place_id])
}

model Place {
  place_id        String     @id
  kakao_place_id String     @unique
  place_name      String
  place_address   String?
  place_latitude  Float
  place_longitude Float
  place_image_url String?
  place_star      Float?
  place_call_num  String?
  review_count    Int?       @default(0)
  days            DayPlace[]
  Expense         Expense[]
}

model Expense {
  expense_id Int         @id @default(autoincrement())
  trip_id    String
  day_id     Int?
  place_id   String?
  type       ExpenseType
  title      String
  price      Int
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  user_id    Int
  day        Day?        @relation(fields: [day_id], references: [day_id])
  trip       Trip        @relation(fields: [trip_id], references: [trip_id])
  user       User        @relation(fields: [user_id], references: [user_id])
  place      Place?      @relation(fields: [place_id], references: [place_id], map: "place_id")
}

model Like {
  like_id    Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [post_id])
  user       User     @relation(fields: [user_id], references: [user_id])
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  content    String
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [post_id])
  user       User     @relation(fields: [user_id], references: [user_id])
}

model Post {
  post_id    Int       @id @default(autoincrement())
  trip_id    String
  user_id    Int
  title      String?
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  comments   Comment[]
  likes      Like[]
  trip       Trip      @relation(fields: [trip_id], references: [trip_id])
  user       User      @relation(fields: [user_id], references: [user_id])
}

model Checklist {
  checklist_id Int     @id @default(autoincrement())
  trip_id      String
  item         String
  is_checked   Boolean @default(false)
  trip         Trip    @relation(fields: [trip_id], references: [trip_id])
}

model Friendship {
  id                                 Int              @id @default(autoincrement())
  requester_id                       Int
  recipient_id                       Int
  status                             FriendshipStatus @default(PENDING)
  created_at                         DateTime         @default(now())
  User_Friendship_recipient_idToUser User             @relation("Friendship_recipient_idToUser", fields: [recipient_id], references: [user_id])
  User_Friendship_requester_idToUser User             @relation("Friendship_requester_idToUser", fields: [requester_id], references: [user_id])

  @@unique([requester_id, recipient_id])
}

model TripInvitation {
  invitation_id   String           @id @default(uuid())
  trip_id         String
  invited_user_id Int
  status          InvitationStatus @default(PENDING)
  permission      String           @default("editor")
  created_at      DateTime         @default(now())
  User            User             @relation(fields: [invited_user_id], references: [user_id])
  Trip            Trip             @relation(fields: [trip_id], references: [trip_id])
}

enum ProviderType {
  GOOGLE
  KAKAO
  NAVER
}

enum TripVisibility {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}

enum CompanionType {
  SOLO
  COUPLE
  FRIENDS
  SPOUSE
  FAMILY
  SIBLINGS
  COLLEAGUES
  PET
  HOBBY_GROUP
  OTHER
}

enum ThemeType {
  ADVENTURE
  SNS_HOTSPOT
  LANDMARK
  CULTURE_HISTORY
  FESTIVAL_EVENT
  NATURE
  SHOPPING
  HEALING
  FOOD_TOUR
}

enum ExpenseType {
  FOOD
  TRANSPORT
  ACCOMMODATION
  TICKET
  OTHER
  ACTIVITY
  SHOPPING
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
